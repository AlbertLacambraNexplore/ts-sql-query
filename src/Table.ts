import type { BooleanValueSource, NumberValueSource, StringValueSource, DateValueSource, TimeValueSource, DateTimeValueSource, EqualableValueSource, IntValueSource, DoubleValueSource, LocalDateValueSource, LocalTimeValueSource, LocalDateTimeValueSource, TypeSafeStringValueSource, StringNumberValueSource, StringIntValueSource, StringDoubleValueSource, ComparableValueSource } from "./expressions/values"
import type { ITableOrView, ITable } from "./utils/ITableOrView"
import type { int, double, LocalDate, LocalTime, LocalDateTime, stringInt, stringDouble } from "ts-extended-types"
import type { TypeAdapter } from "./TypeAdapter"
import type { AliasedTableOrView, OuterJoinSourceOf } from "./utils/tableOrViewUtils"
import type { Column, ColumnWithDefaultValue, OptionalColumn, PrimaryKeyAutogeneratedColumn, PrimaryKeyColumn } from "./utils/Column"
import type { AnyDB, Oracle, PostgreSql, SqlServer, TypeSafeDB } from "./databases"
import { ColumnImpl } from "./internal/ColumnImpl"
import { database, type } from "./utils/symbols"

export class Table<DB extends AnyDB> implements ITable<DB> {
    [database]: DB
    [type]: 'table'
    /* implements __ITableOrViewPrivate as private members*/
    // @ts-ignore
    private __name: string
    // @ts-ignore
    private __as?: string
    // @ts-ignore
    private __type: 'table' = 'table'

    constructor(name: string) {
        this.__name = name
    }

    as<ALIAS extends string>(as: ALIAS): AliasedTableOrView<DB, this, ALIAS> {
        const result = new ((this as any).constructor)() as Table<DB>
        result.__as = as
        return result as any
    }
    forUseInLeftJoin(): OuterJoinSourceOf<DB, this, ''> {
        return this as any
    }
    forUseInLeftJoinAs<ALIAS extends string>(as: ALIAS): OuterJoinSourceOf<DB, this, ALIAS> {
        return this.as(as) as any
    }

    protected column(name: string, type: 'boolean', adapter?: TypeAdapter): BooleanValueSource<DB, this, boolean> & Column
    protected column(this: ITableOrView<TypeSafeDB>, name: string, type: 'stringInt', adapter?: TypeAdapter): StringIntValueSource<DB, this, stringInt> & Column
    protected column(name: string, type: 'stringInt', adapter?: TypeAdapter): StringNumberValueSource<DB, this, number | string> & Column
    protected column(this: ITableOrView<TypeSafeDB>, name: string, type: 'int', adapter?: TypeAdapter): IntValueSource<DB, this, int> & Column
    protected column(name: string, type: 'int', adapter?: TypeAdapter): NumberValueSource<DB, this, number> & Column
    protected column(this: ITableOrView<TypeSafeDB>, name: string, type: 'stringDouble', adapter?: TypeAdapter): StringDoubleValueSource<DB, this, stringDouble> & Column
    protected column(name: string, type: 'stringDouble', adapter?: TypeAdapter): StringNumberValueSource<DB, this, number | string> & Column
    protected column(this: ITableOrView<TypeSafeDB>, name: string, type: 'double', adapter?: TypeAdapter): DoubleValueSource<DB, this, double> & Column
    protected column(name: string, type: 'double', adapter?: TypeAdapter): NumberValueSource<DB, this, number> & Column
    protected column(this: ITableOrView<TypeSafeDB>, name: string, type: 'string', adapter?: TypeAdapter): TypeSafeStringValueSource<DB, this, string> & Column
    protected column(name: string, type: 'string', adapter?: TypeAdapter): StringValueSource<DB, this, string> & Column
    protected column(this: ITableOrView<TypeSafeDB>, name: string, type: 'localDate', adapter?: TypeAdapter): LocalDateValueSource<DB, this, LocalDate> & Column
    protected column(name: string, type: 'localDate', adapter?: TypeAdapter): DateValueSource<DB, this, Date> & Column
    protected column(this: ITableOrView<TypeSafeDB>, name: string, type: 'localTime', adapter?: TypeAdapter): LocalTimeValueSource<DB, this, LocalTime> & Column
    protected column(name: string, type: 'localTime', adapter?: TypeAdapter): TimeValueSource<DB, this, Date> & Column
    protected column(this: ITableOrView<TypeSafeDB>, name: string, type: 'localDateTime', adapter?: TypeAdapter): LocalDateTimeValueSource<DB, this, LocalDateTime> & Column
    protected column(name: string, type: 'localDateTime', adapter?: TypeAdapter): DateTimeValueSource<DB, this, Date> & Column
    protected column<T>(name: string, type: 'enum', typeName: string, adapter?: TypeAdapter): EqualableValueSource<DB, this, T> & Column
    protected column<T>(name: string, type: 'custom', typeName: string, adapter?: TypeAdapter): EqualableValueSource<DB, this, T> & Column
    protected column<T>(name: string, type: 'customComparable', typeName: string, adapter?: TypeAdapter): ComparableValueSource<DB, this, T> & Column
    protected column<_T>(name: string, type: string, adapter?: TypeAdapter | string, adapter2?: TypeAdapter): any /* EqualableValueSource<DB, this, T> & Column */ { // Returns any to avoid: Type instantiation is excessively deep and possibly infinite.ts(2589)
        if (typeof adapter === 'string') {
            return new ColumnImpl(this, name, adapter, adapter2)
        }
        return new ColumnImpl(this, name, type, adapter)
    }

    protected optionalColumn(name: string, type: 'boolean', adapter?: TypeAdapter): BooleanValueSource<DB, this, boolean | null | undefined> & OptionalColumn
    protected optionalColumn(this: ITableOrView<TypeSafeDB>, name: string, type: 'stringInt', adapter?: TypeAdapter): StringIntValueSource<DB, this, stringInt | null | undefined> & OptionalColumn
    protected optionalColumn(name: string, type: 'stringInt', adapter?: TypeAdapter): StringNumberValueSource<DB, this, number | string | null | undefined> & OptionalColumn
    protected optionalColumn(this: ITableOrView<TypeSafeDB>, name: string, type: 'int', adapter?: TypeAdapter): IntValueSource<DB, this, int | null | undefined> & OptionalColumn
    protected optionalColumn(name: string, type: 'int', adapter?: TypeAdapter): NumberValueSource<DB, this, number | null | undefined> & OptionalColumn
    protected optionalColumn(this: ITableOrView<TypeSafeDB>, name: string, type: 'stringDouble', adapter?: TypeAdapter): StringDoubleValueSource<DB, this, stringDouble | null | undefined> & OptionalColumn
    protected optionalColumn(name: string, type: 'stringDouble', adapter?: TypeAdapter): StringNumberValueSource<DB, this, number | string | null | undefined> & OptionalColumn
    protected optionalColumn(this: ITableOrView<TypeSafeDB>, name: string, type: 'double', adapter?: TypeAdapter): DoubleValueSource<DB, this, double | null | undefined> & OptionalColumn
    protected optionalColumn(name: string, type: 'double', adapter?: TypeAdapter): NumberValueSource<DB, this, number | null | undefined> & OptionalColumn
    protected optionalColumn(this: ITableOrView<TypeSafeDB>, name: string, type: 'string', adapter?: TypeAdapter): TypeSafeStringValueSource<DB, this, string | null | undefined> & OptionalColumn
    protected optionalColumn(name: string, type: 'string', adapter?: TypeAdapter): StringValueSource<DB, this, string | null | undefined> & OptionalColumn
    protected optionalColumn(this: ITableOrView<TypeSafeDB>, name: string, type: 'localDate', adapter?: TypeAdapter): LocalDateValueSource<DB, this, LocalDate | null | undefined> & OptionalColumn
    protected optionalColumn(name: string, type: 'localDate', adapter?: TypeAdapter): DateValueSource<DB, this, Date | null | undefined> & OptionalColumn
    protected optionalColumn(this: ITableOrView<TypeSafeDB>, name: string, type: 'localTime', adapter?: TypeAdapter): LocalTimeValueSource<DB, this, LocalTime | null | undefined> & OptionalColumn
    protected optionalColumn(name: string, type: 'localTime', adapter?: TypeAdapter): TimeValueSource<DB, this, Date | null | undefined> & OptionalColumn
    protected optionalColumn(this: ITableOrView<TypeSafeDB>, name: string, type: 'localDateTime', adapter?: TypeAdapter): LocalDateTimeValueSource<DB, this, LocalDateTime | null | undefined> & OptionalColumn
    protected optionalColumn(name: string, type: 'localDateTime', adapter?: TypeAdapter): DateTimeValueSource<DB, this, Date | null | undefined> & OptionalColumn
    protected optionalColumn<T>(name: string, type: 'enum', typeName: string, adapter?: TypeAdapter): EqualableValueSource<DB, this, T | null | undefined> & OptionalColumn
    protected optionalColumn<T>(name: string, type: 'custom', typeName: string, adapter?: TypeAdapter): EqualableValueSource<DB, this, T | null | undefined> & OptionalColumn
    protected optionalColumn<T>(name: string, type: 'customComparable', typeName: string, adapter?: TypeAdapter): ComparableValueSource<DB, this, T | null | undefined> & OptionalColumn
    protected optionalColumn<_T>(name: string, type: string, adapter?: TypeAdapter | string, adapter2?: TypeAdapter): any /* EqualableValueSource<DB, this, T | null | undefined> & OptionalColumn */ { // Returns any to avoid: Type instantiation is excessively deep and possibly infinite.ts(2589)
        if (typeof adapter === 'string') {
            return (new ColumnImpl(this, name, adapter, adapter2)).__asOptionalColumn()
        }
        return (new ColumnImpl(this, name, type, adapter)).__asOptionalColumn()
    }

    protected columnWithDefaultValue(name: string, type: 'boolean', adapter?: TypeAdapter): BooleanValueSource<DB, this, boolean> & ColumnWithDefaultValue
    protected columnWithDefaultValue(this: ITableOrView<TypeSafeDB>, name: string, type: 'stringInt', adapter?: TypeAdapter): StringIntValueSource<DB, this, stringInt> & ColumnWithDefaultValue
    protected columnWithDefaultValue(name: string, type: 'stringInt', adapter?: TypeAdapter): StringNumberValueSource<DB, this, number | string> & ColumnWithDefaultValue
    protected columnWithDefaultValue(this: ITableOrView<TypeSafeDB>, name: string, type: 'int', adapter?: TypeAdapter): IntValueSource<DB, this, int> & ColumnWithDefaultValue
    protected columnWithDefaultValue(name: string, type: 'int', adapter?: TypeAdapter): NumberValueSource<DB, this, number> & ColumnWithDefaultValue
    protected columnWithDefaultValue(this: ITableOrView<TypeSafeDB>, name: string, type: 'stringDouble', adapter?: TypeAdapter): StringDoubleValueSource<DB, this, stringDouble> & ColumnWithDefaultValue
    protected columnWithDefaultValue(name: string, type: 'stringDouble', adapter?: TypeAdapter): StringNumberValueSource<DB, this, number | string> & ColumnWithDefaultValue
    protected columnWithDefaultValue(this: ITableOrView<TypeSafeDB>, name: string, type: 'double', adapter?: TypeAdapter): DoubleValueSource<DB, this, double> & ColumnWithDefaultValue
    protected columnWithDefaultValue(name: string, type: 'double', adapter?: TypeAdapter): NumberValueSource<DB, this, number> & ColumnWithDefaultValue
    protected columnWithDefaultValue(this: ITableOrView<TypeSafeDB>, name: string, type: 'string', adapter?: TypeAdapter): TypeSafeStringValueSource<DB, this, string> & ColumnWithDefaultValue
    protected columnWithDefaultValue(name: string, type: 'string', adapter?: TypeAdapter): StringValueSource<DB, this, string> & ColumnWithDefaultValue
    protected columnWithDefaultValue(this: ITableOrView<TypeSafeDB>, name: string, type: 'localDate', adapter?: TypeAdapter): LocalDateValueSource<DB, this, LocalDate> & ColumnWithDefaultValue
    protected columnWithDefaultValue(name: string, type: 'localDate', adapter?: TypeAdapter): DateValueSource<DB, this, Date> & ColumnWithDefaultValue
    protected columnWithDefaultValue(this: ITableOrView<TypeSafeDB>, name: string, type: 'localTime', adapter?: TypeAdapter): LocalTimeValueSource<DB, this, LocalTime> & ColumnWithDefaultValue
    protected columnWithDefaultValue(name: string, type: 'localTime', adapter?: TypeAdapter): TimeValueSource<DB, this, Date> & ColumnWithDefaultValue
    protected columnWithDefaultValue(this: ITableOrView<TypeSafeDB>, name: string, type: 'localDateTime', adapter?: TypeAdapter): LocalDateTimeValueSource<DB, this, LocalDateTime> & ColumnWithDefaultValue
    protected columnWithDefaultValue(name: string, type: 'localDateTime', adapter?: TypeAdapter): DateTimeValueSource<DB, this, Date> & ColumnWithDefaultValue
    protected columnWithDefaultValue<T>(name: string, type: 'enum', typeName: string, adapter?: TypeAdapter): EqualableValueSource<DB, this, T> & ColumnWithDefaultValue
    protected columnWithDefaultValue<T>(name: string, type: 'custom', typeName: string, adapter?: TypeAdapter): EqualableValueSource<DB, this, T> & ColumnWithDefaultValue
    protected columnWithDefaultValue<T>(name: string, type: 'customComparable', typeName: string, adapter?: TypeAdapter): ComparableValueSource<DB, this, T> & ColumnWithDefaultValue
    protected columnWithDefaultValue<_T>(name: string, type: string, adapter?: TypeAdapter | string, adapter2?: TypeAdapter): any /* EqualableValueSource<DB, this, T> & ColumnWithDefaultValue */ { // Returns any to avoid: Type instantiation is excessively deep and possibly infinite.ts(2589)
        if (typeof adapter === 'string') {
            return (new ColumnImpl(this, name, adapter, adapter2)).__asColumnWithDefaultValue()
        }
        return (new ColumnImpl(this, name, type, adapter)).__asColumnWithDefaultValue()
    }

    protected optionalColumnWithDefaultValue(name: string, type: 'boolean', adapter?: TypeAdapter): BooleanValueSource<DB, this, boolean> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(this: ITableOrView<TypeSafeDB>, name: string, type: 'stringInt', adapter?: TypeAdapter): StringIntValueSource<DB, this, stringInt> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(name: string, type: 'stringInt', adapter?: TypeAdapter): StringNumberValueSource<DB, this, number | string> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(this: ITableOrView<TypeSafeDB>, name: string, type: 'int', adapter?: TypeAdapter): IntValueSource<DB, this, int> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(name: string, type: 'int', adapter?: TypeAdapter): NumberValueSource<DB, this, number> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(this: ITableOrView<TypeSafeDB>, name: string, type: 'stringDouble', adapter?: TypeAdapter): StringDoubleValueSource<DB, this, stringDouble> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(name: string, type: 'stringDouble', adapter?: TypeAdapter): StringNumberValueSource<DB, this, number | string> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(this: ITableOrView<TypeSafeDB>, name: string, type: 'double', adapter?: TypeAdapter): DoubleValueSource<DB, this, double> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(name: string, type: 'double', adapter?: TypeAdapter): NumberValueSource<DB, this, number> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(this: ITableOrView<TypeSafeDB>, name: string, type: 'string', adapter?: TypeAdapter): TypeSafeStringValueSource<DB, this, string> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(name: string, type: 'string', adapter?: TypeAdapter): StringValueSource<DB, this, string> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(this: ITableOrView<TypeSafeDB>, name: string, type: 'localDate', adapter?: TypeAdapter): LocalDateValueSource<DB, this, LocalDate> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(name: string, type: 'localDate', adapter?: TypeAdapter): DateValueSource<DB, this, Date> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(this: ITableOrView<TypeSafeDB>, name: string, type: 'localTime', adapter?: TypeAdapter): LocalTimeValueSource<DB, this, LocalTime> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(name: string, type: 'localTime', adapter?: TypeAdapter): TimeValueSource<DB, this, Date> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(this: ITableOrView<TypeSafeDB>, name: string, type: 'localDateTime', adapter?: TypeAdapter): LocalDateTimeValueSource<DB, this, LocalDateTime> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue(name: string, type: 'localDateTime', adapter?: TypeAdapter): DateTimeValueSource<DB, this, Date> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue<T>(name: string, type: 'enum', typeNme: string, adapter?: TypeAdapter): EqualableValueSource<DB, this, T> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue<T>(name: string, type: 'custom', typeNme: string, adapter?: TypeAdapter): EqualableValueSource<DB, this, T> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue<T>(name: string, type: 'customComparable', typeNme: string, adapter?: TypeAdapter): ComparableValueSource<DB, this, T> & OptionalColumn & ColumnWithDefaultValue
    protected optionalColumnWithDefaultValue<_T>(name: string, type: string, adapter?: TypeAdapter | string, adapter2?: TypeAdapter): any /* EqualableValueSource<DB, this, T> & OptionalColumn & ColumnWithDefaultValue */ { // Returns any to avoid: Type instantiation is excessively deep and possibly infinite.ts(2589)
        if (typeof adapter === 'string') {
            return (new ColumnImpl(this, name, adapter, adapter2)).__asOptionalColumnWithDefaultValue()
        }
        return (new ColumnImpl(this, name, type, adapter)).__asOptionalColumnWithDefaultValue()
    }

    protected autogeneratedPrimaryKey(name: string, type: 'boolean', adapter?: TypeAdapter): BooleanValueSource<DB, this, boolean> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(this: ITableOrView<TypeSafeDB>, name: string, type: 'stringInt', adapter?: TypeAdapter): StringIntValueSource<DB, this, stringInt> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(name: string, type: 'stringInt', adapter?: TypeAdapter): StringNumberValueSource<DB, this, number | string> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(this: ITableOrView<TypeSafeDB>, name: string, type: 'int', adapter?: TypeAdapter): IntValueSource<DB, this, int> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(name: string, type: 'int', adapter?: TypeAdapter): NumberValueSource<DB, this, number> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(this: ITableOrView<TypeSafeDB>, name: string, type: 'stringDouble', adapter?: TypeAdapter): StringDoubleValueSource<DB, this, stringDouble> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(name: string, type: 'stringDouble', adapter?: TypeAdapter): StringNumberValueSource<DB, this, number | string> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(this: ITableOrView<TypeSafeDB>, name: string, type: 'double', adapter?: TypeAdapter): DoubleValueSource<DB, this, double> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(name: string, type: 'double', adapter?: TypeAdapter): NumberValueSource<DB, this, number> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(this: ITableOrView<TypeSafeDB>, name: string, type: 'string', adapter?: TypeAdapter): TypeSafeStringValueSource<DB, this, string> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(name: string, type: 'string', adapter?: TypeAdapter): StringValueSource<DB, this, string> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(this: ITableOrView<TypeSafeDB>, name: string, type: 'localDate', adapter?: TypeAdapter): LocalDateValueSource<DB, this, LocalDate> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(name: string, type: 'localDate', adapter?: TypeAdapter): DateValueSource<DB, this, Date> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(this: ITableOrView<TypeSafeDB>, name: string, type: 'localTime', adapter?: TypeAdapter): LocalTimeValueSource<DB, this, LocalTime> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(name: string, type: 'localTime', adapter?: TypeAdapter): TimeValueSource<DB, this, Date> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(this: ITableOrView<TypeSafeDB>, name: string, type: 'localDateTime', adapter?: TypeAdapter): LocalDateTimeValueSource<DB, this, LocalDateTime> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey(name: string, type: 'localDateTime', adapter?: TypeAdapter): DateTimeValueSource<DB, this, Date> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey<T>(name: string, type: 'enum', typeName: string, adapter?: TypeAdapter): EqualableValueSource<DB, this, T> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey<T>(name: string, type: 'custom', typeName: string, adapter?: TypeAdapter): EqualableValueSource<DB, this, T> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey<T>(name: string, type: 'customComparable', typeName: string, adapter?: TypeAdapter): ComparableValueSource<DB, this, T> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKey<_T>(name: string, type: string, adapter?: TypeAdapter | string, adapter2?: TypeAdapter): any /* EqualableValueSource<DB, this, T> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn */ { // Returns any to avoid: Type instantiation is excessively deep and possibly infinite.ts(2589)
        if (typeof adapter === 'string') {
            return (new ColumnImpl(this, name, adapter, adapter2)).__asAutogeneratedPrimaryKey()
        }
        return (new ColumnImpl(this, name, type, adapter)).__asAutogeneratedPrimaryKey()
    }

    protected primaryKey(name: string, type: 'boolean', adapter?: TypeAdapter): BooleanValueSource<DB, this, boolean> & PrimaryKeyColumn
    protected primaryKey(this: ITableOrView<TypeSafeDB>, name: string, type: 'stringInt', adapter?: TypeAdapter): StringIntValueSource<DB, this, stringInt> & PrimaryKeyColumn
    protected primaryKey(name: string, type: 'stringInt', adapter?: TypeAdapter): StringNumberValueSource<DB, this, number | string> & PrimaryKeyColumn
    protected primaryKey(this: ITableOrView<TypeSafeDB>, name: string, type: 'int', adapter?: TypeAdapter): IntValueSource<DB, this, int> & PrimaryKeyColumn
    protected primaryKey(name: string, type: 'int', adapter?: TypeAdapter): NumberValueSource<DB, this, number> & PrimaryKeyColumn
    protected primaryKey(this: ITableOrView<TypeSafeDB>, name: string, type: 'stringDouble', adapter?: TypeAdapter): StringDoubleValueSource<DB, this, stringDouble> & PrimaryKeyColumn
    protected primaryKey(name: string, type: 'stringDouble', adapter?: TypeAdapter): StringNumberValueSource<DB, this, number | string> & PrimaryKeyColumn
    protected primaryKey(this: ITableOrView<TypeSafeDB>, name: string, type: 'double', adapter?: TypeAdapter): DoubleValueSource<DB, this, double> & PrimaryKeyColumn
    protected primaryKey(name: string, type: 'double', adapter?: TypeAdapter): NumberValueSource<DB, this, number> & PrimaryKeyColumn
    protected primaryKey(this: ITableOrView<TypeSafeDB>, name: string, type: 'string', adapter?: TypeAdapter): TypeSafeStringValueSource<DB, this, string> & PrimaryKeyColumn
    protected primaryKey(name: string, type: 'string', adapter?: TypeAdapter): StringValueSource<DB, this, string> & PrimaryKeyColumn
    protected primaryKey(this: ITableOrView<TypeSafeDB>, name: string, type: 'localDate', adapter?: TypeAdapter): LocalDateValueSource<DB, this, LocalDate> & PrimaryKeyColumn
    protected primaryKey(name: string, type: 'localDate', adapter?: TypeAdapter): DateValueSource<DB, this, Date> & PrimaryKeyColumn
    protected primaryKey(this: ITableOrView<TypeSafeDB>, name: string, type: 'localTime', adapter?: TypeAdapter): LocalTimeValueSource<DB, this, LocalTime> & PrimaryKeyColumn
    protected primaryKey(name: string, type: 'localTime', adapter?: TypeAdapter): TimeValueSource<DB, this, Date> & PrimaryKeyColumn
    protected primaryKey(this: ITableOrView<TypeSafeDB>, name: string, type: 'localDateTime', adapter?: TypeAdapter): LocalDateTimeValueSource<DB, this, LocalDateTime> & PrimaryKeyColumn
    protected primaryKey(name: string, type: 'localDateTime', adapter?: TypeAdapter): DateTimeValueSource<DB, this, Date> & PrimaryKeyColumn
    protected primaryKey<T>(name: string, type: 'enum', typeName: string, adapter?: TypeAdapter): EqualableValueSource<DB, this, T> & PrimaryKeyColumn
    protected primaryKey<T>(name: string, type: 'custom', typeName: string, adapter?: TypeAdapter): EqualableValueSource<DB, this, T> & PrimaryKeyColumn
    protected primaryKey<T>(name: string, type: 'customComparable', typeName: string, adapter?: TypeAdapter): ComparableValueSource<DB, this, T> & PrimaryKeyColumn
    protected primaryKey<_T>(name: string, type: string, adapter?: TypeAdapter | string, adapter2?: TypeAdapter): any /* EqualableValueSource<DB, this, T> & PrimaryKeyColumn */ { // Returns any to avoid: Type instantiation is excessively deep and possibly infinite.ts(2589)
        if (typeof adapter === 'string') {
            return (new ColumnImpl(this, name, adapter, adapter2)).__asPrimaryKey()
        }
        return (new ColumnImpl(this, name, type, adapter)).__asPrimaryKey()
    }

    protected autogeneratedPrimaryKeyBySequence(this: ITableOrView<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'boolean', adapter?: TypeAdapter): BooleanValueSource<DB, this, boolean> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: ITableOrView<TypeSafeDB & (Oracle | PostgreSql | SqlServer)>, name: string, sequenceName: string, type: 'stringInt', adapter?: TypeAdapter): StringIntValueSource<DB, this, stringInt> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: ITableOrView<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'stringInt', adapter?: TypeAdapter): StringNumberValueSource<DB, this, number | string> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: ITableOrView<TypeSafeDB & (Oracle | PostgreSql | SqlServer)>, name: string, sequenceName: string, type: 'int', adapter?: TypeAdapter): IntValueSource<DB, this, int> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: ITableOrView<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'int', adapter?: TypeAdapter): NumberValueSource<DB, this, number> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: ITableOrView<TypeSafeDB & (Oracle | PostgreSql | SqlServer)>, name: string, sequenceName: string, type: 'stringDouble', adapter?: TypeAdapter): StringDoubleValueSource<DB, this, stringDouble> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: ITableOrView<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'stringDouble', adapter?: TypeAdapter): StringNumberValueSource<DB, this, number | string> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: ITableOrView<TypeSafeDB & (Oracle | PostgreSql | SqlServer)>, name: string, sequenceName: string, type: 'double', adapter?: TypeAdapter): DoubleValueSource<DB, this, double> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: ITableOrView<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'double', adapter?: TypeAdapter): NumberValueSource<DB, this, number> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: ITableOrView<TypeSafeDB & (Oracle | PostgreSql | SqlServer)>, name: string, sequenceName: string, type: 'string', adapter?: TypeAdapter): TypeSafeStringValueSource<DB, this, string> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: ITableOrView<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'string', adapter?: TypeAdapter): StringValueSource<DB, this, string> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: ITableOrView<TypeSafeDB & (Oracle | PostgreSql | SqlServer)>, name: string, sequenceName: string, type: 'localDate', adapter?: TypeAdapter): LocalDateValueSource<DB, this, LocalDate> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: ITableOrView<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'localDate', adapter?: TypeAdapter): DateValueSource<DB, this, Date> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: ITableOrView<TypeSafeDB & (Oracle | PostgreSql | SqlServer)>, sequenceName: string, name: string, type: 'localTime', adapter?: TypeAdapter): LocalTimeValueSource<DB, this, LocalTime> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: ITableOrView<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'localTime', adapter?: TypeAdapter): TimeValueSource<DB, this, Date> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: ITableOrView<TypeSafeDB & (Oracle | PostgreSql | SqlServer)>, sequenceName: string, name: string, type: 'localDateTime', adapter?: TypeAdapter): LocalDateTimeValueSource<DB, this, LocalDateTime> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence(this: ITableOrView<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'localDateTime', adapter?: TypeAdapter): DateTimeValueSource<DB, this, Date> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence<T>(this: ITableOrView<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'enum', typeName: string, adapter?: TypeAdapter): EqualableValueSource<DB, this, T> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence<T>(this: ITableOrView<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'custom', typeName: string, adapter?: TypeAdapter): EqualableValueSource<DB, this, T> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence<T>(this: ITableOrView<Oracle | PostgreSql | SqlServer>, name: string, sequenceName: string, type: 'customComparable', typeName: string, adapter?: TypeAdapter): ComparableValueSource<DB, this, T> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn
    protected autogeneratedPrimaryKeyBySequence<_T>(name: string, sequenceName: string, type: string, adapter?: TypeAdapter | string, adapter2?: TypeAdapter): any /* EqualableValueSource<DB, this, T> & ColumnWithDefaultValue & PrimaryKeyColumn & PrimaryKeyAutogeneratedColumn */ { // Returns any to avoid: Type instantiation is excessively deep and possibly infinite.ts(2589)
        if (typeof adapter === 'string') {
            return (new ColumnImpl(this, name, adapter, adapter2)).__asAutogeneratedPrimaryKeyBySequence(sequenceName)
        }
        return (new ColumnImpl(this, name, type, adapter)).__asAutogeneratedPrimaryKeyBySequence(sequenceName)
    }
}
