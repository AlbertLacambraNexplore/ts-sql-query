import type { ColumnsOf, InputTypeOfColumn, ValueSource, TypeOfColumn } from "./values"
import type { ITableOrView, NoTableOrViewRequired } from "../utils/ITableOrView"
import type { AnyDB, TypeSafeDB, NoopDB, PostgreSql, SqlServer, Oracle } from "../databases"
import type { int } from "ts-extended-types"
import type { ExecutableSelect } from "./select"
import type { database } from "../utils/symbols"
import type { ColumnWithDefaultValue, OptionalColumn, PrimaryKeyAutogeneratedColumn } from "../utils/Column"

export interface InsertExpressionBase<DB extends AnyDB> {
    [database]: DB
}

export interface ExecutableInsertReturning<DB extends AnyDB, RESULT> extends InsertExpressionBase<DB> {
    executeInsert(): Promise<RESULT>
    query(): string
    params(): any[]
}

export interface ExecutableInsertFromSelect<DB extends AnyDB> extends InsertExpressionBase<DB> {
    executeInsert(this: InsertExpressionBase<TypeSafeDB>): Promise<int>
    executeInsert(): Promise<number>
    query(): string
    params(): any[]
}

export interface ExecutableInsert<DB extends AnyDB, TABLE extends ITableOrView<DB>> extends InsertExpressionBase<DB> {
    executeInsert(this: InsertExpressionBase<TypeSafeDB>): Promise<int>
    executeInsert(): Promise<number>
    query(): string
    params(): any[]
    returningLastInsertedId: ReturningLastInsertedIdType<DB, TABLE>
    // returning(this: ExecutableInsert<NoopDB, any>): boolean
    // returning(this: ExecutableInsert<PostgreSql, any>): boolean
    // returning(this: NotSupportedDB): boolean
}

export interface ExecutableMultipleInsert<DB extends AnyDB, TABLE extends ITableOrView<DB>> extends InsertExpressionBase<DB> {
    executeInsert(this: InsertExpressionBase<TypeSafeDB>): Promise<int>
    executeInsert(): Promise<number>
    query(): string
    params(): any[]
    returningLastInsertedId: ReturningMultipleLastInsertedIdType<DB, TABLE>
}

export interface ExecutableInsertExpression<DB extends AnyDB, TABLE extends ITableOrView<DB>> extends ExecutableInsert<DB, TABLE> {
    set(columns: InsertSets<DB, TABLE>): ExecutableInsertExpression<DB, TABLE>
    setIfValue(columns: OptionalInsertSets<DB, TABLE>): ExecutableInsertExpression<DB, TABLE>
    setIfSet(columns: InsertSets<DB, TABLE>): ExecutableInsertExpression<DB, TABLE>
    setIfSetIfValue(columns: OptionalInsertSets<DB, TABLE>): ExecutableInsertExpression<DB, TABLE>
    setIfNotSet(columns: InsertSets<DB, TABLE>): ExecutableInsertExpression<DB, TABLE>
    setIfNotSetIfValue(columns: OptionalInsertSets<DB, TABLE>): ExecutableInsertExpression<DB, TABLE>
    ignoreIfSet(...columns: OptionalColumnsForInsertOf<DB, TABLE>[]): ExecutableInsertExpression<DB, TABLE>
}

export interface MissingKeysInsertExpression<DB extends AnyDB, TABLE extends ITableOrView<DB>, MISSING_KEYS> extends InsertExpressionBase<DB> {
    set<COLUMNS extends InsertSets<DB, TABLE>>(columns: COLUMNS): MaybeExecutableInsertExpression<DB, TABLE, Exclude<MISSING_KEYS, keyof COLUMNS>>
    setIfValue<COLUMNS extends OptionalInsertSets<DB, TABLE>>(columns: COLUMNS): MaybeExecutableInsertExpression<DB, TABLE, Exclude<MISSING_KEYS, keyof COLUMNS>>
    setIfSet<COLUMNS extends InsertSets<DB, TABLE>>(columns: COLUMNS): MaybeExecutableInsertExpression<DB, TABLE, Exclude<MISSING_KEYS, keyof COLUMNS>>
    setIfSetIfValue<COLUMNS extends OptionalInsertSets<DB, TABLE>>(columns: COLUMNS): MaybeExecutableInsertExpression<DB, TABLE, Exclude<MISSING_KEYS, keyof COLUMNS>>
    setIfNotSet<COLUMNS extends InsertSets<DB, TABLE>>(columns: COLUMNS): MaybeExecutableInsertExpression<DB, TABLE, Exclude<MISSING_KEYS, keyof COLUMNS>>
    setIfNotSetIfValue<COLUMNS extends OptionalInsertSets<DB, TABLE>>(columns: COLUMNS): MaybeExecutableInsertExpression<DB, TABLE, Exclude<MISSING_KEYS, keyof COLUMNS>>
    ignoreIfSet(...columns: OptionalColumnsForInsertOf<DB, TABLE>[]): MissingKeysInsertExpression<DB, TABLE, MISSING_KEYS>
}

export interface InsertExpression<DB extends AnyDB, TABLE extends ITableOrView<DB>> extends InsertExpressionBase<DB> {
    dynamicSet(): MissingKeysInsertExpression<DB, TABLE, keyof RequiredInsertSets<DB, TABLE>>
    set(columns: InsertSets<DB, TABLE> & RequiredInsertSets<DB, TABLE>): ExecutableInsertExpression<DB, TABLE>
    setIfValue(columns: OptionalInsertSets<DB, TABLE> & RequiredInsertSets<DB, TABLE>): ExecutableInsertExpression<DB, TABLE>
    values(columns: InsertSets<DB, TABLE> & RequiredInsertSets<DB, TABLE>): ExecutableInsertExpression<DB, TABLE>
    values(columns: Array<InsertSets<DB, TABLE> & RequiredInsertSets<DB, TABLE>>): ExecutableMultipleInsert<DB, TABLE>
    defaultValues: DefaultValueType<DB, TABLE>
    from(select: ExecutableSelect<DB, SelectForInsertResultType<DB, TABLE>, NoTableOrViewRequired>): ExecutableInsertFromSelect<DB>
}

type ReturningMultipleLastInsertedIdType<DB extends AnyDB, TABLE extends ITableOrView<DB>> =
    DB extends (NoopDB | PostgreSql | SqlServer | Oracle) 
    ? AutogeneratedPrimaryKeyColumnsTypesOf<DB, TABLE> extends never ? never : () => ExecutableInsertReturning<DB, AutogeneratedPrimaryKeyColumnsTypesOf<DB, TABLE>[]>
    : never

type ReturningLastInsertedIdType<DB extends AnyDB, TABLE extends ITableOrView<DB>> =
    AutogeneratedPrimaryKeyColumnsTypesOf<DB, TABLE> extends never ? never : () => ExecutableInsertReturning<DB, AutogeneratedPrimaryKeyColumnsTypesOf<DB, TABLE>>

type DefaultValueType<DB extends AnyDB, TABLE extends ITableOrView<DB>> =
    'yes' extends MissingKeys<keyof RequiredInsertSets<DB, TABLE>> ? never : () => ExecutableInsert<DB, TABLE>

type MissingKeys<KEYS> = KEYS extends never ? never : 'yes'
type MaybeExecutableInsertExpression<DB extends AnyDB, TABLE extends ITableOrView<DB>, MISSING_KEYS> = 
    'yes' extends MissingKeys<MISSING_KEYS> ? MissingKeysInsertExpression<DB, TABLE, MISSING_KEYS> : ExecutableInsertExpression<DB, TABLE>

export type SelectForInsertResultType<DB extends AnyDB, TABLE extends ITableOrView<DB>> = {
    [P in ColumnsOf<DB, TABLE>]?: TypeOfColumn<DB, TABLE, P>
} & {
    [P in RequiredColumnsForInsertOf<DB, TABLE>]: TypeOfColumn<DB, TABLE, P>
}

export type InsertSets<DB extends AnyDB, TABLE extends ITableOrView<DB>> = {
    [P in ColumnsOf<DB, TABLE>]?: InputTypeOfColumn<DB, TABLE, P>
}

export type OptionalInsertSets<DB extends AnyDB, TABLE extends ITableOrView<DB>> = {
    [P in ColumnsOf<DB, TABLE>]?: InputTypeOfColumn<DB, TABLE, P> | null | undefined
}

export type RequiredInsertSets<DB extends AnyDB, TABLE extends ITableOrView<DB>> = {
    [P in RequiredColumnsForInsertOf<DB, TABLE>]: InputTypeOfColumn<DB, TABLE, P>
}

export type RequiredColumnsForInsertOf<DB extends AnyDB, T extends ITableOrView<DB>> = (
    { [K in keyof T]-?: T[K] extends ValueSource<DB, T, any> ? (T[K] extends OptionalColumn ? never : (T[K] extends ColumnWithDefaultValue ? never : K)) : never }
)[keyof T]

export type OptionalColumnsForInsertOf<DB extends AnyDB, T extends ITableOrView<DB>> = (
    { [K in keyof T]-?: T[K] extends ValueSource<DB, T, any> ? (T[K] extends OptionalColumn ? K : (T[K] extends ColumnWithDefaultValue ? K : never)) : never }
)[keyof T]

export type AutogeneratedPrimaryKeyColumnsTypesOf<DB extends AnyDB, T extends ITableOrView<DB>> = (
    { [K in keyof T]-?: T[K] extends ValueSource<DB, T, infer TYPE> ? (T[K] extends PrimaryKeyAutogeneratedColumn ? TYPE : never) : never }
)[keyof T]
